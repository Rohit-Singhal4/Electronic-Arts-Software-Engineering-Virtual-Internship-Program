The unreal engine, similar to most game development engines, uses its own format, objects, and actions. In order to implement Vac-Man on the Unreal Engine, we need to distinguish the objects, actions, and elements in our Vex-Man game in order to recreate them on the game engine.

The first few steps that need to be taken are configuration steps. The Unreal Engine needs to be downloaded and configured for the type of file, type of device, and the quality of the graphics. Once everything is set up, we need to recreate all of the objects and elements of our Vex-man game in accordance with the engine syntax. It would also be helpful to create a blueprint of how the game works and set some of the groundwork for the foundation of the game. Most of the implementation in the unreal engine comes next, each element and its objective/purpose would need to be recreated and out together.

There are a variety of obvious issues most people will run into. Firstly, there will definitely be a learning curve for the syntax and formatting of the engine as most people typically do not have much experience with game development engines. Creating a blueprint is encapsulated in this learning curve as it uses a scripting language which most developers do not know the best practices for. There are a variety of other problems that could be faced during development as well especially when relating elements to one another. Lastly, a common pitfall to be aware of in this case is the mistake of overextending during the development process. Specifically in this case, Pac-man and Vac-man are fairly simple games which is why it is very important to keep them that way and not overcomplicate the process of implementing it with the Unreal Engine.